{
  "hash": "8141fc602565418a818f688a05f46ccc",
  "result": {
    "markdown": "---\ntitle: \"Mixture densities\"\nformat: \n    revealjs:\n      mainfont: Lato\n      smaller: true\n---\n\n\n# Definition\n\n## What is a mixture density?\n\nA mixture density (sometimes called an \"admixture\" density) is a convex combination (i.e. weighted sum, with non-negative weights that sum to 1) of other density functions.\n\nIn other words...\n\n\n$$\nf(x) = \\sum_{i=1}^nw_i p_i(x),\n$$\n\nwhere $p_i(x)$ is a pdf and $w_i > 0$ for all $i$ and $\\sum w_i = 1$. We say: $f(x)$ is a (finite) mixture density.\n\nMixture densities are often used to model distinct sub-populations within a population. This allows us to create flexible prior distributions.\n\n. . . \n\n### Exercise\n\nProve that $f(x)$ is a proper density function, i.e. that $f(x) \\geq 0$ everywhere and $\\int f(x) dx = 1$.\n\n# Practice exercises\n\n## Exercise 1\n\nCreate and plot a function $f(x)$ that is a mixture of two densities and approximates the histogram below.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-mixtures_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n## Exercise 2\n\nSuppose an experimental machine in a lab is either fine, or comes from a bad batch of machines that are to be recalled by the manufacturer. Scientists in the lab want to estimate the failure rate of their machine and decide whether or not to return it. They encode their prior uncertainty about the failure rate $\\theta$ with the following density: \n\n\n$$\np(\\theta) = \\frac{1}{4} \\frac{\\Gamma(10)}{\\Gamma(2)\\Gamma(8)}\\left[\n3 \\theta (1 - \\theta)^7 + \\theta^7(1- \\theta)\n\\right]\n$$\n\n\n\n(a). Make a plot of this prior density and explain why it makes sense for the scientists. Based on the prior density, which do the scientists think is more likely - that their machine is fine, or bad?\n\n(b). The scientists run the machine $n$ times. Let $y_i$ be one if the machine fails on the $i$th run, and zero otherwise. Write out the posterior distribution of $\\theta$ given $y_1, \\ldots, y_n$ (up to a proportionality constant) and simplify as much as possible.\n\n(c). The posterior is a mixture (weighted average) of two distributions that you know. Identify these two distributions, including their parameters.\n\n\n\n\n\n# Solutions \n\n## Solution 1\n\nThe plot looks like a mixture of normals. The first centered on 0 and the second on 10. More weight is given to the first density.\n\n::: panel-tabset \n\n## plot\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-mixtures_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n## code\n\n::: {.cell}\n\n```{.r .cell-code}\nmixNormal = function(x) {\n  0.75 *dnorm(x, 0, 1) +\n  0.25 * dnorm(x, 10, 1)\n}\n\ndata.frame(x = -2:13) %>%\nggplot(aes(x = x)) +\n  stat_function(fun = mixNormal) +\n  labs(y = \"f(x)\")\n```\n:::\n\n:::\n\n## Solution 2\n\nIn lab.",
    "supporting": [
      "lab-mixtures_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}