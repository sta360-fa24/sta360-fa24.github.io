{
  "hash": "b22218f566396d6b177b1c16c9a92f06",
  "result": {
    "markdown": "---\ntitle: \"Bayesian inverse problem practice\"\nformat: \n    revealjs:\n      mainfont: Lato\n      smaller: true\n---\n\n\n# Estimating $R_0$\n\n## Install packages\n\nWe will use the library `deSolve` \"differential equation solve\" to solve a system of differential equations in this lab. You can install the package using the code below.\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"deSolve\")\n```\n:::\n\nand then load the package with the following code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(deSolve)\n```\n:::\n\n## Data\n\n## Exercise\n\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsir_equations <- function(time, variables, parameters) {\n  with(as.list(c(variables, parameters)), {\n    dS <- -beta * I * S\n    dI <-  beta * I * S - gamma * I\n    dR <-  gamma * I\n    return(list(c(dS, dI, dR)))\n  })\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparameters_values <- c(\n  beta  = 0.004, # infectious contact rate (/person/day)\n  gamma = 0.5    # recovery rate (/day)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninitial_values <- c(\n  S = 999,  # number of susceptibles at time = 0\n  I =   1,  # number of infectious at time = 0\n  R =   0   # number of recovered (and immune) at time = 0\n)\ntime_values <- seq(0, 10) # days\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"initial_values\"    \"parameters_values\" \"sir_equations\"    \n[4] \"time_values\"      \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsir_values_1 <- ode(\n  y = initial_values,\n  times = time_values,\n  func = sir_equations,\n  parms = parameters_values \n)\n\nsir_values_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   time           S         I          R\n1     0 999.0000000   1.00000   0.000000\n2     1 963.7055761  31.79830   4.496125\n3     2 461.5687749 441.91575  96.515480\n4     3  46.1563480 569.50418 384.339476\n5     4   7.0358807 373.49831 619.465807\n6     5   2.1489407 230.12934 767.721720\n7     6   1.0390927 140.41085 858.550058\n8     7   0.6674074  85.44479 913.887801\n9     8   0.5098627  51.94498 947.545162\n10    9   0.4328913  31.56515 968.001960\n11   10   0.3919173  19.17668 980.431400\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsir_1 <- function(beta, gamma, S0, I0, R0, times) {\n  require(deSolve) # for the \"ode\" function\n  \n# the differential equations:\n  sir_equations <- function(time, variables, parameters) {\n    with(as.list(c(variables, parameters)), {\n      dS <- -beta * I * S\n      dI <-  beta * I * S - gamma * I\n      dR <-  gamma * I\n      return(list(c(dS, dI, dR)))\n    })\n  }\n  \n# the parameters values:\n  parameters_values <- c(beta  = beta, gamma = gamma)\n\n# the initial values of variables:\n  initial_values <- c(S = S0, I = I0, R = R0)\n  \n# solving\n  out <- ode(initial_values, times, sir_equations, parameters_values)\n\n# returning the output:\n  as.data.frame(out)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsir_1(beta = 0.004, gamma = 0.5, S0 = 999, I0 = 1, R0 = 0, times = seq(0, 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   time           S         I          R\n1     0 999.0000000   1.00000   0.000000\n2     1 963.7055761  31.79830   4.496125\n3     2 461.5687749 441.91575  96.515480\n4     3  46.1563480 569.50418 384.339476\n5     4   7.0358807 373.49831 619.465807\n6     5   2.1489407 230.12934 767.721720\n7     6   1.0390927 140.41085 858.550058\n8     7   0.6674074  85.44479 913.887801\n9     8   0.5098627  51.94498 947.545162\n10    9   0.4328913  31.56515 968.001960\n11   10   0.3919173  19.17668 980.431400\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}