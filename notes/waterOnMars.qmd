---
title: "Water on Mars"
author: "Dr. Alexander Fisher"
# mainfont: Lato
format: 
  html:
    toc: true
execute: 
  eval: false
---

Based on [Liquid water in the Martian mid-crust by Wright, Morzfeld and Manga](https://www.pnas.org/doi/epub/10.1073/pnas.2409983121).

Watch video [here](https://www.iris.edu/hq/inclass/animation/1component_seismogram_building_responds_to_p_s_surface_waves).

```{r}
#| label: "load-libraries"
#| message: false
#| warning: false
library(tidyverse)
```

```{r}
seismic_data = data.frame(y = c(4.1, 2.5, 2589),
                          sd = c(0.2, 0.3, 157))
```

## Parameter Table

|            |                             |
|------------|-----------------------------|
| $\alpha$   | Pore shape aspect ratio     |
| $\phi$     | Porosity                    |
| $\gamma_w$ | Water saturation (%)        |
| $\kappa_m$ | Mineral bulk modulus (GPa)  |
| $\mu_m$    | Mineral shear modulus (GPa) |
| $\rho_m$   | Mineral density (kg/m$^3$)  |



```{r}
# Berrymanâ€™s rock physics model 
Vp = function(ke, mue, pb) {
  sqrt((ke + ((4/3) * mue)) / pb)
}

Vs = function(mue, pb) {
  sqrt(mue/pb)
}

getParameters = function(alpha, phi, gw, km, mum, rhom)
```


```{r}
berryscm <- function(k, mu, asp, x) {
  # Initialize output
  kbr <- numeric(0)
  mubr <- numeric(0)

  # Ensure inputs are column vectors
  k <- as.vector(k)
  mu <- as.vector(mu)
  asp <- as.vector(asp)
  x <- as.vector(x)

  # Adjust aspect ratio for perfectly spherical inclusions
  asp[asp == 1] <- 0.99

  # Initialize variables
  theta <- numeric(length(asp))
  fn <- numeric(length(asp))

  # Calculate theta and fn for oblate spheroids
  obdx <- which(asp < 1)
  theta[obdx] <- (asp[obdx] / ((1 - asp[obdx]^2)^(3/2))) * 
                  (acos(asp[obdx]) - asp[obdx] * sqrt(1 - asp[obdx]^2))
  fn[obdx] <- (asp[obdx]^2 / (1 - asp[obdx]^2)) * (3 * theta[obdx] - 2)

  # Calculate theta and fn for prolate spheroids
  prdx <- which(asp > 1)
  theta[prdx] <- (asp[prdx] / ((asp[prdx]^2 - 1)^(3/2))) * 
                  (asp[prdx] * sqrt(asp[prdx]^2 - 1) - acosh(asp[prdx]))
  fn[prdx] <- (asp[prdx]^2 / (asp[prdx]^2 - 1)) * (2 - 3 * theta[prdx])

  # Initial values for ksc and musc
  ksc <- sum(k * x)
  musc <- sum(mu * x)
  knew <- 0
  munew <- 0
  tol <- 1e-6 * k[1]
  del <- abs(ksc - knew)
  niter <- 0

  # Iterative calculation
  while (del > abs(tol) & niter < 3000) {
    nusc <- (3 * ksc - 2 * musc) / (2 * (3 * ksc + musc))
    a <- mu / musc - 1
    b <- (1 / 3) * (k / ksc - mu / musc)
    r <- (1 - 2 * nusc) / (2 * (1 - nusc))

    f1 <- 1 + a * ((3 / 2) * (fn + theta) - r * ((3 / 2) * fn + (5 / 2) * theta - (4 / 3)))
    f2 <- 1 + a * (1 + (3 / 2) * (fn + theta) - (r / 2) * (3 * fn + 5 * theta)) + b * (3 - 4 * r)
    f2 <- f2 + (a / 2) * (a + 3 * b) * (3 - 4 * r) * (fn + theta - r * (fn - theta + 2 * theta^2))
    f3 <- 1 + a * (1 - (fn + (3 / 2) * theta) + r * (fn + theta))
    f4 <- 1 + (a / 4) * (fn + 3 * theta - r * (fn - theta))
    f5 <- a * (-fn + r * (fn + theta - (4 / 3))) + b * theta * (3 - 4 * r)
    f6 <- 1 + a * (1 + fn - r * (fn + theta)) + b * (1 - theta) * (3 - 4 * r)
    f7 <- 2 + (a / 4) * (3 * fn + 9 * theta - r * (3 * fn + 5 * theta)) + b * theta * (3 - 4 * r)
    f8 <- a * (1 - 2 * r + (fn / 2) * (r - 1) + (theta / 2) * (5 * r - 3)) + b * (1 - theta) * (3 - 4 * r)
    f9 <- a * ((r - 1) * fn - r * theta) + b * theta * (3 - 4 * r)

    p <- 3 * f1 / f2
    q <- (2 / f3) + (1 / f4) + ((f4 * f5 + f6 * f7 - f8 * f9) / (f2 * f4))

    p <- p / 3
    q <- q / 5

    # Update ksc and musc
    knew <- sum(x * k * p) / sum(x * p)
    munew <- sum(x * mu * q) / sum(x * q)

    del <- abs(ksc - knew)
    ksc <- knew
    musc <- munew
    niter <- niter + 1
  }
  
  kbr <- ksc
  mubr <- musc

  return(list(kbr = kbr, mubr = mubr))
}

```


```{r}
myBerry <- function(theta, H = 3) {
  asp <- c(1, theta[1])
  x_phi <- theta[2]
  rock_vol <- 1 - theta[2]
  x <- c(rock_vol, x_phi)
  
  rock_density <- theta[6] * rock_vol  # density of solid phase
  gas_density <- 0.020 * x_phi         # density of fluid phase
  rhob1 <- rock_density + gas_density   # bulk density
  P_water <- theta[3]                   # percentage of water in pore space
  k <- c(theta[4] * 1e9, 0)
  mu <- c(theta[5] * 1e9, 0)

  result <- berryscm(k, mu, asp, x)
  return(c(result, "rhob" = rhob1))
}
```


## Code
```{r}
# theta is vector of parameters 
# theta[1] = alpha 
# theta[2] = phi = porosity
# theta[3] = gamma_w = % water
# theta[4] = kappa = Mineral bulk modulus
# theta[5] = mu = Mineral shear modulus
# theta[6] = rho_m = total mineral density 

set.seed(360)
alpha = 0.5
porosity = 0.25 #runif(1, 0.05, 0.50)
saturation = 0.05
kappa_m = 78
mu_m = 33
rhom = 3000
theta = c(alpha, porosity, saturation, kappa_m, mu_m, rhom)

result = myBerry(theta)
vp = result$kbr
vs = result$mubr
# H = unlist(myBerry(theta))
vp / 1e3
vs / 1e3
result$rhob
```

```{r}
out = NULL
if (sum(H) == 3) {
  out <- c(vp / 1e3, vs / 1e3, rhob)
} else if (sum(H) == 2) {
  if (H[1] == 1 && H[2] == 1) {  # vp and vs
    out <- c(vp / 1e3, vs / 1e3)
  } else if (H[1] == 1 && H[3] == 1) {  # vp and rho
    out <- c(vp / 1e3, rhob)
  } else if (H[2] == 1 && H[3] == 1) {  # vs and rho
    out <- c(vs / 1e3, rhob)
  } else {
    stop("What?")
  }
} else if (sum(H) == 1) {
  if (H[1] == 1) {
    out <- vp / 1e3
  } else if (H[2] == 1) {
    out <- vs / 1e3
  } else if (H[3] == 1) {
    out <- rhob
  } else {
    stop("What?")
  }
  out
}
```


